# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      AWS_REGION:
        description: region to use to create infrastructure
        required: true
        default: "__aws_region__"
      ENV:
        description: name of environment
        required: true
        default: "__default_env__"
      GROUP_NAME:
        description: name of group
        required: true
        default: "__group_name__"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # this workflow only do build and test application when pull request happen
  build-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      APP_NAME: api-order
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: print
        run: |
          echo "${{ toJson(github) }}"

      - name: checkout
        uses: actions/checkout@v2

      - name: Build
        run: |
          docker build -t ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} .

  build-test-publish-image:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ ((github.event.inputs.AWS_REGION != '') && github.event.inputs.AWS_REGION) || '__aws_region__' }}
      IMAGE_TAG: ${{ github.sha }}
      APP_NAME: __app_name__
      GROUP_NAME: ${{ ((github.event.inputs.GROUP_NAME != '') && github.event.inputs.GROUP_NAME) || '__group_name__' }}
      ENV_NAME: ${{ ((github.event.inputs.ENV != '') && github.event.inputs.ENV) || '__default_env__' }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Build
        run: |
          docker build -t ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR Repo
        run: |
            aws ecr describe-repositories --repository-names ${{ env.GROUP_NAME }}-${{ env.APP_NAME }} || aws ecr create-repository --repository-name ${{ env.GROUP_NAME }}-${{ env.APP_NAME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: ecr-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ env.ECR_REPO }}
        run: |
            docker tag ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.GROUP_NAME }}-${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
            docker push ${{ env.ECR_REGISTRY }}/${{ env.GROUP_NAME }}-${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
            echo "::set-output name=image::${{ env.ECR_REGISTRY }}/${{ env.GROUP_NAME }}-${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}"

  deploy-to-__default_env__:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [build-test-publish-image]
    runs-on: ubuntu-latest
    environment: __default_env__
    env:
      AWS_REGION: ${{ ((github.event.inputs.AWS_REGION != '') && github.event.inputs.AWS_REGION) || '__aws_region__' }}
      IMAGE_TAG: ${{ github.sha }}
      APP_NAME: __app_name__
      GROUP_NAME: ${{ ((github.event.inputs.GROUP_NAME != '') && github.event.inputs.GROUP_NAME) || '__group_name__' }}
      ENV_NAME: ${{ ((github.event.inputs.ENV != '') && github.event.inputs.ENV) || '__default_env__' }}

    steps:
      - name: checkout
        uses: actions/checkout@v2
      
      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Verify terraform
        run: terraform --version
        working-directory: ".terraform"

      
      - name: Init Terraform
        id : terraform-init
        run: terraform init
        working-directory: ".terraform"

      - name: Create workspace
        run: terraform workspace select ${{ env.AWS_REGION }}-${{ env.GROUP_NAME }}-${{ env.ENV_NAME }} || terraform workspace new ${{ env.AWS_REGION }}-${{ env.GROUP_NAME }}-${{ env.ENV_NAME }}
        working-directory: ".terraform"  

      - name: Apply Terraform
        id: terraform-apply
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: terraform apply -auto-approve -var="env=${{ env.ENV_NAME }}" -var="group=${{ env.GROUP_NAME }}" -var="aws_region=${{ env.AWS_REGION }}" -var="app_image=${{ env.ECR_REGISTRY }}/${{ env.GROUP_NAME }}-${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}"
        working-directory: ".terraform"
      
      - name: Exclude Task Definition from Terraform
        id: terraform-exclude
        run: terraform state rm aws_ecs_task_definition.app
        working-directory: ".terraform"

  deploy-to-prd:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [deploy-to-__default_env__]
    runs-on: ubuntu-latest
    environment: prd
    env:
      AWS_REGION: ${{ ((github.event.inputs.AWS_REGION != '') && github.event.inputs.AWS_REGION) || '__aws_region__' }}
      IMAGE_TAG: ${{ github.sha }}
      APP_NAME: __app_name__
      GROUP_NAME: ${{ ((github.event.inputs.GROUP_NAME != '') && github.event.inputs.GROUP_NAME) || '__group_name__' }}
      ENV_NAME: ${{ ((github.event.inputs.ENV != '') && github.event.inputs.ENV) || 'prd' }}

    steps:
      - name: checkout
        uses: actions/checkout@v2
      
      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Verify terraform
        run: terraform --version
        working-directory: ".terraform"

      
      - name: Init Terraform
        id : terraform-init
        run: terraform init
        working-directory: ".terraform"

      - name: Create workspace
        run: terraform workspace select ${{ env.AWS_REGION }}-${{ env.GROUP_NAME }}-${{ env.ENV_NAME }} || terraform workspace new ${{ env.AWS_REGION }}-${{ env.GROUP_NAME }}-${{ env.ENV_NAME }}
        working-directory: ".terraform"  

      - name: Apply Terraform
        id: terraform-apply
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: terraform apply -auto-approve -var="env=${{ env.ENV_NAME }}" -var="group=${{ env.GROUP_NAME }}" -var="aws_region=${{ env.AWS_REGION }}" -var="app_image=${{ env.ECR_REGISTRY }}/${{ env.GROUP_NAME }}-${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}"
        working-directory: ".terraform"
      
      - name: Exclude Task Definition from Terraform
        id: terraform-exclude
        run: terraform state rm aws_ecs_task_definition.app
        working-directory: ".terraform"

  
